#  1. ++++++++
# Найти сумму чисел списка стоящих на нечетной позиции
# 
# Пример:  [1,2,3,4] -> 4

# Пример:
#   [2, 3, 5, 9, 3] -> на нечётных позициях элементы 3 и 9, ответ: 12

### ===== ПЕРВЫЙ ВАРИАНТ =============
# rosters =  list(map(int, input("Введите список состоящий из чисел через пробел:\n").split()))

# def Sum_Index(l1st):
#     s = 0
#     for i in range(len(l1st)):
#         if i % 2 != 0:
#             s += l1st[i]
#     return s

# print(f'Сумма чисел списка стоящих на нечетных позициях = {Sum_Index(rosters)}')

### ===== ВТОРОЙ ВАРИАНТ =============
# from cgitb import text


# A =  int(input("Введите число A для создания списка (от A до N):\n"))
# N =  int(input("Введите число N для создания списка (от A до N):\n"))
# B =  int(input("Введите число шага в списке (от A до N):\n"))

# rosters = list(range(A, N+1, B))

# print(rosters) 

# def sum_odd_position(mylist):
#     return sum(mylist[1::2])

# print(f'Сумма чисел списка стоящих на нечетных позициях = {sum_odd_position(rosters)}') 

# #================================ Для справки ================
# text = '0123456789'
# print(text[1::2]) # 13579
# print(text[2::2]) # 2468  # ==================
# ====================================================

# 2. 
# Найти произведение пар чисел в списке. 
# Парой считаем первый и последний элемент, второй и предпоследний и т.д. 
# 
# Пример: [2, 3, 4, 5, 6] => [12, 15, 16]; 
#         [2, 3, 5, 6] => [12, 15] 

# Пример:
#	[2, 3, 4, 5, 6] => [12, 15, 16];
#	[2, 3, 5, 6] => [12, 15]

# def mult_lst(lst):
#     l = len(lst)//2 + 1 if len(lst) % 2 != 0 else len(lst)//2
#     new_lst = [lst[i]*lst[len(lst)-i-1] for i in range(l)]
#     print(new_lst)

# lst = [2, 3, 4, 5, 6]
# mult_lst(lst)
# lst = list(map(int, input("Введите числа через пробел:\n").split()))
# mult_lst(lst)

# # ========================= 
# from random import randint
# import math

# def get_numbers(n, frst, last):
#     return [randint(frst, last) for i in range(n)]

# def mult_pairs(mylist):
#     return [mylist[i] * mylist[-i - 1] for i in range(math.ceil(len(mylist)/2))]

# n = 9
# frst = 1
# last = 10

# mylist = get_numbers(n, frst, last)
# print(mylist)
# print(mult_pairs(mylist))


# # Второй способ:

# def pairs_mult(numbers):
#     results = []
#     while len(numbers) > 1:
#         results.append(numbers[0]*numbers[-1])
#         del numbers[0] 
#         del numbers[-1] 
#     if len(numbers) ==1: results.append(numbers[0]**2)       
#     return results

# print(pairs_mult(mylist))                 # =====================

# # ===================================================

# # 3. 
# # В заданном списке вещественных чисел найдите разницу 
# # между максимальным и минимальным значением дробной части элементов.
# # 
# #  Пример: [1.1, 1.2, 3.1, 5, 10.01] => 0.19

# # Пример:
# #   [1.1, 1.2, 3.1, 5, 10.01] => 0.19


# lst = list(map(float, input("Введите числа через пробел:\n").split()))
# new_lst = [round(i%1,2) for i in lst if i%1 != 0]
# print(max(new_lst) - min(new_lst))


# # =================================  
# from random import randint
# import math

# def get_numbers(n, frst, last):
#     return [randint(frst, last) for i in range(n)]

# def mult_pairs(mylist):
#     return [mylist[i] * mylist[-i - 1] for i in range(math.ceil(len(mylist)/2))]

# n = 9
# frst = 1
# last = 10

# mylist = get_numbers(n, frst, last)
# print(mylist)
# print(mult_pairs(mylist))


# # Второй способ:

# def pairs_mult(numbers):
#     results = []
#     while len(numbers) > 1:
#         results.append(numbers[0]*numbers[-1])
#         del numbers[0] 
#         del numbers[-1] 
#     if len(numbers) ==1: results.append(numbers[0]**2)       
#     return results

# print(pairs_mult(mylist))          # ========================

# # ======================================================

# # 4.
# # Написать программу преобразования десятичного числа в двоичное

# # 45 -> 101101
# # 3 -> 11
# # 2 -> 10


# s = ""
# n = int(input("Введите число для преобразовывания десятичного числа в двоичное:\n"))
# while n != 0:
#     s = str(n%2) + s
#     n //=2
# print(s)

# # ================================  

# n = int(input('Введите число: '))

# def conv_dec_to_bin(n):
#     bin_num = ''
#     while n > 1:
#         bin_num += str(n % 2)
#         n = n // 2
#     return bin_num[::-1]

# print(conv_dec_to_bin(n))

# # Другие решения

# def convert_dec_to_bin(n):
#     bin_num = []
#     while n > 1:
#         bin_num.insert(0, n % 2)
#         n = n // 2
#     return bin_num

# print(convert_dec_to_bin(n))

# print(bin(n).replace('0b1',''))                    # ================

# =====================================================

# Экстра-задачи:

# 1. 
# Написать программу преобразования двоичного числа в десятичное.


# =========================================================

# 2. Создайте программу, которая будет играть в игру “коровы и быки” с пользователем. Игра работает так:


# Случайным образом генерируйте 4-значное число. 
# Попросите пользователя угадать 4-значное число. 
# За каждую цифру, которую пользователь правильно угадал в нужном месте, у них есть “корова”. 
# За каждую цифру, которую пользователь угадал правильно, в неправильном месте стоит “бык”. 
# Каждый раз, когда пользователь делает предположение, скажите им, сколько у них “коров” и “быков”. 
# Как только пользователь угадает правильное число, игра окончена. 
# Следите за количеством догадок, которые пользователь делает на протяжении всей игры, и сообщите пользователю в конце.



# =================================================================
# 3.
# Каждый следующий элемент ряда Фибоначчи получается при сложении двух предыдущих. 
# Начиная с 1 и 2, первые 10 элементов будут:
#  
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# Найдите сумму всех четных элементов ряда Фибоначчи, которые не превышают четыре миллиона.

# ===============================     26. Дано число. Составить список чисел Фибоначчи, 
# в том числе для отрицательных индексов

# n = int(input('Введите число: '))

# def get_fibonacci(n):
#     fibo_nums = []
#     a, b = 1, 1
#     for i in range(n-1):
#         fibo_nums.append(a)
#         a, b = b, a + b
#     a, b = 0, 1
#     for i in range (n):
#         fibo_nums.insert(0, a)
#         a, b = b, a - b
#     return fibo_nums

# fibo_nums = get_fibonacci(n)
# print(get_fibonacci(n))
# print(fibo_nums.index(0))       #=========================================

# ================================================================

#  4. 
# Простые делители числа 13195 - это 5, 7, 13 и 29.
# Каков самый большой делитель числа 600851475143, являющийся простым числом?



# ===================================================================
# 
# 5.
#  2520 - самое маленькое число, которое делится без остатка на все числа от 1 до 10.
#  Какое самое маленькое число делится нацело на все числа от 1 до 20? 



#  ===================================================================

